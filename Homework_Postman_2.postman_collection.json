{
	"info": {
		"_postman_id": "da127f6c-2372-44af-b3fc-14fd56e9c76c",
		"name": "Homework_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20480107"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User _info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"let name_response = jsonData.name;",
							"let name_check = \"Anastasiya\";",
							"",
							"pm.test(\"Check_name\", function () {",
							"    pm.expect(name_response).to.eql(name_check);",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"let age_response = jsonData.age;",
							"let age_check = \"23\";",
							"",
							"pm.test(\"Check_age\", function () {",
							"    pm.expect(age_response).to.eql(age_check);",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"let salary_response = jsonData.salary;",
							"let salary_check = 2000;",
							"",
							"pm.test(\"Check_salary\", function () {",
							"    pm.expect(salary_response).to.eql(salary_check);",
							"});",
							"",
							"//7. Спарсить request.",
							"let req =request.data;",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let name_request = request.data.name;",
							"pm.test(\"Check_request_name\", function () {",
							"    pm.expect(name_response).to.eql(name_request);",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let age_request = request.data.age;",
							"pm.test(\"Check_request_age\", function () {",
							"    pm.expect(age_response).to.eql(age_request);",
							"});",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let salary_request = parseInt(request.data.salary);",
							"pm.test(\"Check_request_salary\", function () {",
							"    pm.expect(salary_response).to.eql(salary_request);",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"let family = jsonData.family",
							"console.log(family);",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let salary_req_1_5year = parseInt(request.data.salary) * 4;",
							"let salary_resp_1_5year = jsonData.family.u_salary_1_5_year;",
							"console.log(salary_resp_1_5year);",
							"pm.test(\"salary_1_5_year\", function () {",
							"    pm.expect(salary_resp_1_5year).to.eql(salary_req_1_5year);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasiya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"let req = pm.request.url.query.all();",
							"console.log(req);",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let resp_name = jsonData.name;",
							"let req_name = pm.request.url.query.get('name');",
							"pm.test(\"Name\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let resp_age = jsonData.age;",
							"let req_age = pm.request.url.query.get('age');",
							"pm.test(\"Age\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let resp_salary = jsonData.salary;",
							"let req_salary = parseInt(pm.request.url.query.get('salary'));",
							"pm.test(\"Salary\", function () {",
							"    pm.expect(resp_salary).to.eql(req_salary);",
							"});",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"let resp_family = jsonData.family;",
							"console.log(resp_family);",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"let resp_dog_name = jsonData.family.pets.dog;",
							"console.log(resp_dog_name);",
							"pm.test(\"Dog have property name\", function () {",
							"    pm.expect(resp_dog_name).to.have.property(\"name\");",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"let resp_dog_age = jsonData.family.pets.dog;",
							"console.log(resp_dog_age);",
							"pm.test(\"Dog have property age\", function () {",
							"    pm.expect(resp_dog_age).to.have.property(\"age\");",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"let resp_dog_name_check = jsonData.family.pets.dog.name;",
							"console.log(resp_dog_name_check);",
							"pm.test(\"Dog name check\", function () {",
							"    pm.expect(resp_dog_name_check).to.eql(\"Luky\");",
							"});",
							"",
							"//12.Проверить, что параметр age имеет значение 4.",
							"let resp_dog_age_check = jsonData.family.pets.dog.age;",
							"console.log(resp_dog_age_check);",
							"pm.test(\"Dog age check\", function () {",
							"    pm.expect(resp_dog_age_check).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Anastasiya&age=23&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasiya"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"let req = pm.request.url.query.all();",
							"console.log(req);",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let resp_name = jsonData.name;",
							"let req_name = pm.request.url.query.get(\"name\");",
							"",
							"pm.test(\"Name\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let resp_age = jsonData.age;",
							"let req_age = parseInt(pm.request.url.query.get(\"age\"));",
							"",
							"pm.test(\"Age\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"let req_salary = parseInt(pm.request.url.query.get('salary'));",
							"console.log(req_salary);",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"let resp_salary = jsonData.salary;",
							"console.log(resp_salary);",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"let resp_salary_0 = jsonData.salary[0];",
							"console.log(resp_salary_0);",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"let resp_salary_1 = jsonData.salary[1];",
							"console.log(resp_salary_1);",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"let resp_salary_2 = jsonData.salary[2];",
							"console.log(resp_salary_2);",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Salary 0 parametr\", function () {",
							"    pm.expect(resp_salary_0).to.eql(req_salary);",
							"});",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"let resp_salary_1_int = parseInt(resp_salary_1);",
							"console.log(resp_salary_1_int);",
							"",
							"let req_salary_to_2 = req_salary * 2;",
							"console.log(req_salary_to_2);",
							"pm.test(\"Salary check to 2\", function () {",
							"    pm.expect(resp_salary_1_int).to.eql(req_salary_to_2);",
							"});",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"let resp_salary_2_int = parseInt(resp_salary_2);",
							"console.log(resp_salary_2_int);",
							"",
							"let req_salary_to_3 = req_salary * 3;",
							"console.log(req_salary_to_3);",
							"pm.test(\"Salary check to 2\", function () {",
							"    pm.expect(resp_salary_2_int).to.eql(req_salary_to_3);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}